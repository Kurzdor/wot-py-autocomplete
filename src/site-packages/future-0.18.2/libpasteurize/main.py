# Python bytecode 2.7 (decompiled from Python 2.7)
# Embedded file name: scripts/common/site-packages/future-0.18.2/libpasteurize/main.py
from __future__ import absolute_import, print_function, unicode_literals
import sys
import logging
import optparse
from lib2to3.main import main, warn, StdoutRefactoringTool
from lib2to3 import refactor
from future import __version__
from libpasteurize.fixes import fix_names

def main(args=None):
    parser = optparse.OptionParser(usage=u'pasteurize [options] file|dir ...')
    parser.add_option(u'-V', u'--version', action=u'store_true', help=u'Report the version number of pasteurize')
    parser.add_option(u'-a', u'--all-imports', action=u'store_true', help=u'Adds all __future__ and future imports to each module')
    parser.add_option(u'-f', u'--fix', action=u'append', default=[], help=u'Each FIX specifies a transformation; default: all')
    parser.add_option(u'-j', u'--processes', action=u'store', default=1, type=u'int', help=u'Run 2to3 concurrently')
    parser.add_option(u'-x', u'--nofix', action=u'append', default=[], help=u'Prevent a fixer from being run.')
    parser.add_option(u'-l', u'--list-fixes', action=u'store_true', help=u'List available transformations')
    parser.add_option(u'-v', u'--verbose', action=u'store_true', help=u'More verbose logging')
    parser.add_option(u'--no-diffs', action=u'store_true', help=u"Don't show diffs of the refactoring")
    parser.add_option(u'-w', u'--write', action=u'store_true', help=u'Write back modified files')
    parser.add_option(u'-n', u'--nobackups', action=u'store_true', default=False, help=u"Don't write backups for modified files.")
    refactor_stdin = False
    flags = {}
    options, args = parser.parse_args(args)
    fixer_pkg = u'libpasteurize.fixes'
    avail_fixes = fix_names
    flags[u'print_function'] = True
    if not options.write and options.no_diffs:
        warn(u"not writing files and not printing diffs; that's not very useful")
    if not options.write and options.nobackups:
        parser.error(u"Can't use -n without -w")
    if options.version:
        print(__version__)
        return 0
    else:
        if options.list_fixes:
            print(u'Available transformations for the -f/--fix option:')
            for fixname in sorted(avail_fixes):
                print(fixname)

            if not args:
                return 0
        if not args:
            print(u'At least one file or directory argument required.', file=sys.stderr)
            print(u'Use --help to show usage.', file=sys.stderr)
            return 2
        if u'-' in args:
            refactor_stdin = True
            if options.write:
                print(u"Can't write to stdin.", file=sys.stderr)
                return 2
        level = logging.DEBUG if options.verbose else logging.INFO
        logging.basicConfig(format=u'%(name)s: %(message)s', level=level)
        unwanted_fixes = set()
        for fix in options.nofix:
            if u'.fix_' in fix:
                unwanted_fixes.add(fix)
            found = [ f for f in avail_fixes if f.endswith(u'fix_{0}'.format(fix)) ]
            if len(found) > 1:
                print(u'Ambiguous fixer name. Choose a fully qualified module name instead from these:\n' + u'\n'.join((u'  ' + myf for myf in found)), file=sys.stderr)
                return 2
            if len(found) == 0:
                print(u'Unknown fixer. Use --list-fixes or -l for a list.', file=sys.stderr)
                return 2
            unwanted_fixes.add(found[0])

        extra_fixes = set()
        if options.all_imports:
            prefix = u'libpasteurize.fixes.'
            extra_fixes.add(prefix + u'fix_add_all__future__imports')
            extra_fixes.add(prefix + u'fix_add_future_standard_library_import')
            extra_fixes.add(prefix + u'fix_add_all_future_builtins')
        explicit = set()
        if options.fix:
            all_present = False
            for fix in options.fix:
                if fix == u'all':
                    all_present = True
                if u'.fix_' in fix:
                    explicit.add(fix)
                found = [ f for f in avail_fixes if f.endswith(u'fix_{0}'.format(fix)) ]
                if len(found) > 1:
                    print(u'Ambiguous fixer name. Choose a fully qualified module name instead from these:\n' + u'\n'.join((u'  ' + myf for myf in found)), file=sys.stderr)
                    return 2
                if len(found) == 0:
                    print(u'Unknown fixer. Use --list-fixes or -l for a list.', file=sys.stderr)
                    return 2
                explicit.add(found[0])

            if len(explicit & unwanted_fixes) > 0:
                print(u'Conflicting usage: the following fixers have been simultaneously requested and disallowed:\n' + u'\n'.join((u'  ' + myf for myf in explicit & unwanted_fixes)), file=sys.stderr)
                return 2
            requested = avail_fixes.union(explicit) if all_present else explicit
        else:
            requested = avail_fixes.union(explicit)
        fixer_names = requested | extra_fixes - unwanted_fixes
        rt = StdoutRefactoringTool(sorted(fixer_names), flags, set(), options.nobackups, not options.no_diffs)
        if not rt.errors:
            if refactor_stdin:
                rt.refactor_stdin()
            else:
                try:
                    rt.refactor(args, options.write, None, options.processes)
                except refactor.MultiprocessingUnsupported:
                    print(u"Sorry, -j isn't supported on this platform.", file=sys.stderr)
                    return 1

            rt.summarize()
        return int(bool(rt.errors))
