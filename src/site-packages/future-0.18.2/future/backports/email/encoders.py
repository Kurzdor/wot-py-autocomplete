# Python bytecode 2.7 (decompiled from Python 2.7)
# Embedded file name: scripts/common/site-packages/future-0.18.2/future/backports/email/encoders.py
from __future__ import unicode_literals
from __future__ import division
from __future__ import absolute_import
from future.builtins import str
__all__ = [u'encode_7or8bit',
 u'encode_base64',
 u'encode_noop',
 u'encode_quopri']
try:
    from base64 import encodebytes as _bencode
except ImportError:
    from base64 import encodestring as _bencode

from quopri import encodestring as _encodestring

def _qencode(s):
    enc = _encodestring(s, quotetabs=True)
    return enc.replace(u' ', u'=20')


def encode_base64(msg):
    orig = msg.get_payload()
    encdata = str(_bencode(orig), u'ascii')
    msg.set_payload(encdata)
    msg[u'Content-Transfer-Encoding'] = u'base64'


def encode_quopri(msg):
    orig = msg.get_payload()
    encdata = _qencode(orig)
    msg.set_payload(encdata)
    msg[u'Content-Transfer-Encoding'] = u'quoted-printable'


def encode_7or8bit(msg):
    orig = msg.get_payload()
    if orig is None:
        msg[u'Content-Transfer-Encoding'] = u'7bit'
        return
    else:
        try:
            if isinstance(orig, str):
                orig.encode(u'ascii')
            else:
                orig.decode(u'ascii')
        except UnicodeError:
            charset = msg.get_charset()
            output_cset = charset and charset.output_charset
            if output_cset and output_cset.lower().startswith(u'iso-2022-'):
                msg[u'Content-Transfer-Encoding'] = u'7bit'
            else:
                msg[u'Content-Transfer-Encoding'] = u'8bit'
        else:
            msg[u'Content-Transfer-Encoding'] = u'7bit'

        if not isinstance(orig, str):
            msg.set_payload(orig.decode(u'ascii', u'surrogateescape'))
        return


def encode_noop(msg):
    orig = msg.get_payload()
    if not isinstance(orig, str):
        msg.set_payload(orig.decode(u'ascii', u'surrogateescape'))
