# Python bytecode 2.7 (decompiled from Python 2.7)
# Embedded file name: scripts/common/site-packages/future-0.18.2/future/backports/email/base64mime.py
from __future__ import unicode_literals
from __future__ import division
from __future__ import absolute_import
from future.builtins import range
from future.builtins import bytes
__all__ = [u'body_decode',
 u'body_encode',
 u'decode',
 u'decodestring',
 u'header_encode',
 u'header_length']
from base64 import b64encode
from binascii import b2a_base64, a2b_base64
CRLF = u'\r\n'
NL = u'\n'
EMPTYSTRING = u''
MISC_LEN = 7

def header_length(bytearray):
    groups_of_3, leftover = divmod(len(bytearray), 3)
    n = groups_of_3 * 4
    if leftover:
        n += 4
    return n


def header_encode(header_bytes, charset=u'iso-8859-1'):
    if not header_bytes:
        return u''
    if isinstance(header_bytes, str):
        header_bytes = header_bytes.encode(charset)
    encoded = b64encode(header_bytes).decode(u'ascii')
    return u'=?%s?b?%s?=' % (charset, encoded)


def body_encode(s, maxlinelen=76, eol=NL):
    if not s:
        return s
    encvec = []
    max_unencoded = maxlinelen * 3 // 4
    for i in range(0, len(s), max_unencoded):
        enc = b2a_base64(s[i:i + max_unencoded]).decode(u'ascii')
        if enc.endswith(NL) and eol != NL:
            enc = enc[:-1] + eol
        encvec.append(enc)

    return EMPTYSTRING.join(encvec)


def decode(string):
    if not string:
        return bytes()
    elif isinstance(string, str):
        return a2b_base64(string.encode(u'raw-unicode-escape'))
    else:
        return a2b_base64(string)


body_decode = decode
decodestring = decode
