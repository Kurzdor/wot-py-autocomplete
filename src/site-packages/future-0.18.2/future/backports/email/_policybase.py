# Python bytecode 2.7 (decompiled from Python 2.7)
# Embedded file name: scripts/common/site-packages/future-0.18.2/future/backports/email/_policybase.py
from __future__ import unicode_literals
from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from future.builtins import super
from future.builtins import str
from future.utils import with_metaclass
import abc
from future.backports.email import header
from future.backports.email import charset as _charset
from future.backports.email.utils import _has_surrogates
__all__ = [u'Policy', u'Compat32', u'compat32']

class _PolicyBase(object):

    def __init__(self, **kw):
        for name, value in kw.items():
            if hasattr(self, name):
                super(_PolicyBase, self).__setattr__(name, value)
            raise TypeError(u'{!r} is an invalid keyword argument for {}'.format(name, self.__class__.__name__))

    def __repr__(self):
        args = [ u'{}={!r}'.format(name, value) for name, value in self.__dict__.items() ]
        return u'{}({})'.format(self.__class__.__name__, u', '.join(args))

    def clone(self, **kw):
        newpolicy = self.__class__.__new__(self.__class__)
        for attr, value in self.__dict__.items():
            object.__setattr__(newpolicy, attr, value)

        for attr, value in kw.items():
            if not hasattr(self, attr):
                raise TypeError(u'{!r} is an invalid keyword argument for {}'.format(attr, self.__class__.__name__))
            object.__setattr__(newpolicy, attr, value)

        return newpolicy

    def __setattr__(self, name, value):
        if hasattr(self, name):
            msg = u'{!r} object attribute {!r} is read-only'
        else:
            msg = u'{!r} object has no attribute {!r}'
        raise AttributeError(msg.format(self.__class__.__name__, name))

    def __add__(self, other):
        return self.clone(**other.__dict__)


def _append_doc(doc, added_doc):
    doc = doc.rsplit(u'\n', 1)[0]
    added_doc = added_doc.split(u'\n', 1)[1]
    return doc + u'\n' + added_doc


def _extend_docstrings(cls):
    if cls.__doc__ and cls.__doc__.startswith(u'+'):
        cls.__doc__ = _append_doc(cls.__bases__[0].__doc__, cls.__doc__)
    for name, attr in cls.__dict__.items():
        if attr.__doc__ and attr.__doc__.startswith(u'+'):
            for c in (c for base in cls.__bases__ for c in base.mro()):
                doc = getattr(getattr(c, name), u'__doc__')
                if doc:
                    attr.__doc__ = _append_doc(doc, attr.__doc__)
                    break

    return cls


class Policy(with_metaclass(abc.ABCMeta, _PolicyBase)):
    raise_on_defect = False
    linesep = u'\n'
    cte_type = u'8bit'
    max_line_length = 78

    def handle_defect(self, obj, defect):
        if self.raise_on_defect:
            raise defect
        self.register_defect(obj, defect)

    def register_defect(self, obj, defect):
        obj.defects.append(defect)

    def header_max_count(self, name):
        return None

    @abc.abstractmethod
    def header_source_parse(self, sourcelines):
        raise NotImplementedError

    @abc.abstractmethod
    def header_store_parse(self, name, value):
        raise NotImplementedError

    @abc.abstractmethod
    def header_fetch_parse(self, name, value):
        raise NotImplementedError

    @abc.abstractmethod
    def fold(self, name, value):
        raise NotImplementedError

    @abc.abstractmethod
    def fold_binary(self, name, value):
        raise NotImplementedError


@_extend_docstrings
class Compat32(Policy):

    def _sanitize_header(self, name, value):
        if not isinstance(value, str):
            return value
        elif _has_surrogates(value):
            return header.Header(value, charset=_charset.UNKNOWN8BIT, header_name=name)
        else:
            return value

    def header_source_parse(self, sourcelines):
        name, value = sourcelines[0].split(u':', 1)
        value = value.lstrip(u' \t') + u''.join(sourcelines[1:])
        return (name, value.rstrip(u'\r\n'))

    def header_store_parse(self, name, value):
        return (name, value)

    def header_fetch_parse(self, name, value):
        return self._sanitize_header(name, value)

    def fold(self, name, value):
        return self._fold(name, value, sanitize=True)

    def fold_binary(self, name, value):
        folded = self._fold(name, value, sanitize=self.cte_type == u'7bit')
        return folded.encode(u'ascii', u'surrogateescape')

    def _fold(self, name, value, sanitize):
        parts = []
        parts.append(u'%s: ' % name)
        if isinstance(value, str):
            if _has_surrogates(value):
                if sanitize:
                    h = header.Header(value, charset=_charset.UNKNOWN8BIT, header_name=name)
                else:
                    parts.append(value)
                    h = None
            else:
                h = header.Header(value, header_name=name)
        else:
            h = value
        if h is not None:
            parts.append(h.encode(linesep=self.linesep, maxlinelen=self.max_line_length))
        parts.append(self.linesep)
        return u''.join(parts)


compat32 = Compat32()
