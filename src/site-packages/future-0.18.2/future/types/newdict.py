# Python bytecode 2.7 (decompiled from Python 2.7)
# Embedded file name: scripts/common/site-packages/future-0.18.2/future/types/newdict.py
import sys
from future.utils import with_metaclass
from future.types.newobject import newobject
_builtin_dict = dict
ver = sys.version_info[:2]

class BaseNewDict(type):

    def __instancecheck__(cls, instance):
        if cls == newdict:
            return isinstance(instance, _builtin_dict)
        else:
            return issubclass(instance.__class__, cls)


class newdict(with_metaclass(BaseNewDict, _builtin_dict)):

    def items(self):
        if ver == (2, 7):
            return self.viewitems()
        if ver == (2, 6):
            return self.iteritems()
        return self.items() if ver >= (3, 0) else None

    def keys(self):
        if ver == (2, 7):
            return self.viewkeys()
        if ver == (2, 6):
            return self.iterkeys()
        return self.keys() if ver >= (3, 0) else None

    def values(self):
        if ver == (2, 7):
            return self.viewvalues()
        if ver == (2, 6):
            return self.itervalues()
        return self.values() if ver >= (3, 0) else None

    def __new__(cls, *args, **kwargs):
        if len(args) == 0:
            return super(newdict, cls).__new__(cls)
        if type(args[0]) == newdict:
            value = args[0]
        else:
            value = args[0]
        return super(newdict, cls).__new__(cls, value)

    def __native__(self):
        return dict(self)


__all__ = ['newdict']
