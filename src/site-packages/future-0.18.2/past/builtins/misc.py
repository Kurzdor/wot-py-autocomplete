# Python bytecode 2.7 (decompiled from Python 2.7)
# Embedded file name: scripts/common/site-packages/future-0.18.2/past/builtins/misc.py
from __future__ import unicode_literals
import inspect
from future.utils import PY2, PY3, exec_
if PY2:
    from collections import Mapping
else:
    from collections.abc import Mapping
if PY3:
    import builtins
    from collections.abc import Mapping

    def apply(f, *args, **kw):
        return f(*args, **kw)


    from past.builtins import str as oldstr

    def chr(i):
        return oldstr(bytes((i,)))


    def cmp(x, y):
        return (x > y) - (x < y)


    from sys import intern

    def oct(number):
        return u'0' + builtins.oct(number)[2:]


    raw_input = input
    from imp import reload
    unicode = str
    unichr = chr
    xrange = range
else:
    import __builtin__
    from collections import Mapping
    apply = __builtin__.apply
    chr = __builtin__.chr
    cmp = __builtin__.cmp
    execfile = __builtin__.execfile
    intern = __builtin__.intern
    oct = __builtin__.oct
    raw_input = __builtin__.raw_input
    reload = __builtin__.reload
    unicode = __builtin__.unicode
    unichr = __builtin__.unichr
    xrange = __builtin__.xrange
if PY3:

    def execfile(filename, myglobals=None, mylocals=None):
        if myglobals is None:
            caller_frame = inspect.stack()[1]
            myglobals = caller_frame[0].f_globals
            mylocals = caller_frame[0].f_locals
        elif mylocals is None:
            mylocals = myglobals
        if not isinstance(myglobals, Mapping):
            raise TypeError(u'globals must be a mapping')
        if not isinstance(mylocals, Mapping):
            raise TypeError(u'locals must be a mapping')
        with open(filename, u'rb') as fin:
            source = fin.read()
        code = compile(source, filename, u'exec')
        exec_(code, myglobals, mylocals)
        return


if PY3:
    __all__ = [u'apply',
     u'chr',
     u'cmp',
     u'execfile',
     u'intern',
     u'raw_input',
     u'reload',
     u'unichr',
     u'unicode',
     u'xrange']
else:
    __all__ = []
